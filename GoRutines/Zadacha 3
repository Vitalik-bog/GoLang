 package main

import (
	"context"
	"fmt"
	"time"
)

func longRunningTask(ctx context.Context, id int, result chan<- string) {
	select {
	case <-time.After(3 * time.Second):
		result <- fmt.Sprintf("Task %d completed", id)
	case <-ctx.Done():
		fmt.Printf("Task %d cancelled: %v\n", id, ctx.Err())
		return
	}
}

func main() {
	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
	defer cancel()

	result := make(chan string, 1)

	go longRunningTask(ctx, 1, result)

	select {
	case res := <-result:
		fmt.Println("Result:", res)
	case <-ctx.Done():
		fmt.Println("Operation timed out:", ctx.Err())
	}
}
