package main

import "fmt"

type Book struct {
    Title  string
    Author string
    Year   int
}

func main() {
    // 1. СОЗДАНИЕ СРЕЗА УКАЗАТЕЛЕЙ НА BOOK
    // Это не срез книг ([]Book), а срез указателей на книги ([]*Book).
    // В этом срезе хранятся не сами структуры, а их адреса в памяти.
    var library []*Book

    // 2. СОЗДАЕМ КНИГИ И ДОБАВЛЯЕМ ИХ АДРЕСА В СРЕЗ
    book1 := Book{"Книга 1", "Автор 1", 2000}
    book2 := Book{"Книга 2", "Автор 2", 2010}

    // Добавляем УКАЗАТЕЛИ на книги (& - оператор взятия адреса)
    library = append(library, &book1)
    library = append(library, &book2)

    // 3. ПРЕИМУЩЕСТВО: Можем легко изменить оригинальную книгу через срез
    fmt.Println("До изменения:", book1.Title)
    library[0].Title = "Обновленное название Книги 1" // Меняем оригинал!
    fmt.Println("После изменения:", book1.Title)

    // 4. ПРЕИМУЩЕСТВО: Эффективность при работе с большими структурами
    // При передаче среза []*Book в функции или при его копировании
    // копируются только указатели (маленькие числа-адреса), а не все большие структуры.

    // 5. ОБХОД СРЕЗА УКАЗАТЕЛЕЙ
    fmt.Println("\nКаталог библиотеки:")
    for idx, bookPtr := range library {
        // bookPtr - это указатель (*Book). Чтобы получить значение, используем (*bookPtr)
        // Но, как и в методах, Go позволяет писать просто bookPtr.Title без звездочки.
        fmt.Printf("%d: %s (%d)\n", idx, bookPtr.Title, bookPtr.Year)
    }
}
